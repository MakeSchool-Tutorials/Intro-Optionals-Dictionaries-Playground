/*:
 ![Make School Banner](./swift_banner.png)
 # ディクショナリとオプションの挑戦
 
 ## 電話帳としてのディクショナリ
 
 この練習では、ディクショナリを使ってシンプルな電話帳データ構造を作成します。
 
 ### コアチャレンジ
 
 1. `[String: String]`型の空のディクショナリを作成します。これは`String`の名前をキー、`String`の電話番号を値として保存します。
 1. `String`型の`name`と`String`型の`phoneNumber`という2つのパラメーターを持つ「addContact」という関数を作成します。これを使って「name」がキーとなる、新しい電話番号をディクショナリに追加します。また、「<連絡先氏名>が電話帳に追加されました。」と出力します。
 1. `String`型の`name`というパラメーターを持つ`findContact`という関数を作成します。これを使ってディクショナリから連絡先を検索します。見つかると、「<連絡先氏名>の電話番号は<連絡先電話番号>です。」と出力します。連絡先が存在しない場合は、「<連絡先氏名>は電話帳に含まれていません！」と出力します。
 1. `String`型の`name`と`String`型の`phoneNumber`という2つのパラメーターを持つ`updateContact`という関数を作成します。これを使って`name`がキーの新しい電話番号をディクショナリに追加します。連絡先が電話帳に存在する場合は、"<連絡先氏名>が電話帳で更新されました。"と出力されます。連絡先が存在しない場合は、"<連絡先氏名>は見つかりませんでした。電話帳に追加されました。"と出力されます。
 1. String型のパラメーター`name`を持つ`deleteContact`という関数を作成します。これを使ってディクショナリから電話番号を削除します。連絡先が電話帳に存在する場合は、"<連絡先氏名>は電話帳から削除されました。"と出力されます。連絡先が存在しない場合は、"<連絡先氏名>は見つかりませんでした。"と出力されます。
 1. コードを試してみましょう！ 連絡先をいくつか追加します。連絡先 (電話帳にないことが分かっているものも含む) をいくつか見つけます。連絡先 (電話帳にないことが分かっているものも含む) を更新します。連絡先 (電話帳にないことが分かっているものも含む) をいくつか削除します。
 1. `allContacts`という関数を作成します。この関数は各連絡先を繰り返し処理して、"<連絡先氏名>の電話番号は、<連絡先電話番号>です。"と出力します。ここで別の関数をもう一度使えますか？ 追加の課題では、アルファベット順に出力してみましょう。Google でいろいろ調べる必要があるかもしれませんね！
 
 - note: なぜすべてに関数を使用しているのでしょうか？ これらの関数は「ヘルパー関数」と考えることができます。大規模なアプリケーションを作成する際は、コードを「カプセル化」することが重要になります。アプリケーションの残りの部分は、あなたがディクショナリをコア データ構造として使用しているのだと知る必要はありません。データの操作方法だけわかっていればいいんです！
 
 */













/*:
 [前へ](@previous) | [次へ](@next)
 */
