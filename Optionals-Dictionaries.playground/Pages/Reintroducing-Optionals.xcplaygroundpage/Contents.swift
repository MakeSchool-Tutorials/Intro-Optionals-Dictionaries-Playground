/*:
 ![Make School Banner](./swift_banner.png)
 # Swiftのオプション
 
 ## オプションの別の紹介
 
 これまでにオプショナル型については少し説明しましたが、ここで復習を兼ねてベストプラクティスをいくつかご紹介します！
 
 ### なぜオプション？
 
 プログラミングでは、変数が値を含むことも含まないこともあるという事実を表現できると便利な場合があります。Swiftでは、**オプショナル**を使用してこれを実現できます。オプショナル型は、値**または**何もない状態（「nil」と呼びます）の**いずれか**を保持します。オプショナル型は箱のようなものです。中に何か入っている場合もあれば、空の場合もありますが、開けてみるまでわかりません！
 
 任意の変数（定数以外）をオプショナル型として宣言するには、型名の最後に疑問符（「?」）を付けます。例えば、「Int?」型の変数を宣言できます（「オプショナル型の「Int」と読みます」）。
 */
var maybeAnInt: Int? = 15
//: ここでは、15の変数値を明確に設定しましたが、それと同じぐらい簡単に`nil`を割り当てることもできました:
maybeAnInt = nil
/*: 
 ここで「maybeAnInt」が「nil」（値がない状態）です。「maybeAnInt」を通常の「Int」として宣言していたら、「nil」に設定することはできなかったでしょう。
 
 ## なぜ空変数が必要なのでしょうか？
 
 ゲーム・オブ・ライフとグリッドシミュレーションのチュートリアルは覚えていますか？ グリッドを表すため「Character?」の二次元の「配列」を作成しました。セルに値が含まれることもあれば、含まれないこともありました。値が含まれていなかった場合には、「nil」を使用していました。
 
 これらのチュートリアルでは、値を「Character?」に設定し、値が含まれるか否かをチェックしただけだったことを思い出してください。では、実際にオプショナル型を使ってみましょう！

 ## Optionalのアンラップ
 
 オプショナル型から値を取得するときは、「アンラップ」する必要があります。これは箱を開けて、中身を確認する行為に似ています。前にも説明があったのを覚えているかもしれませんが、条件を「nil」にした場合と比較することで、オプショナル型に値が含まれるか否かをテストできます。「nil」と等しくない場合は、値が含まれます。実に簡単です！
 
 次に、**強制アンラップ**を安全に使用してその値を取得できます。強制アンラップを実行するには、アンラップしたい変数名の後に感嘆符（「!」）を付けます。これはSwiftに対して、オプション型には私たちの読み取りたい値が含まれていると伝えます。
 
 - 重要：指定を間違えるとコードはクラッシュします。その場合、「maybeAnInt」に値が含まれるか否かをテストし、含まれる場合は強制的に箱を開け（強制アンラップを実行し）、その値を出力します。オプショナル型の強制アンラップを実行する前に、必ず「nil」がないかチェックしてください。クラッシュするコードは不良コードです！
 
 */
if maybeAnInt != nil {
    print("maybeAnIntは値を含んでいます。それは \(maybeAnInt!)です。")
} else {
    print("maybeAnIntは値を含んでいません。")
}
/*:
 
 - experiment:
 17行目に戻り、「maybeAnInt」の値を「nil」から別の値に変更してみましょう。値に応じてメッセージが出力されることに注目してください。
 
 ## 短い挑戦
 
 - callout(課題): 以下の値を含むオプショナル型の「Double」配列を下に定義してください。
 
        [154.4, nil, 133, 13.4, 221.3, nil, nil, 103.2]
 
 */



/*:
 
 - callout(課題): 配列を繰り返して「nil」の数をカウントし、その一方でnil以外の値もすべて合計するコードを作成してください。各要素を安全に強制アンラップしましょう！
 
    計算したばかりの値をコンソールに出力します。

        "nilの値は \(numberOfNils) つで、合計は \(sum)"
 
    すべて正しく指定した場合、コンソールには次のメッセージが表示されます。
 
        nilの値は 3 つで、合計は 625.3
 
 */


 
/*:
 [次へ](@next)
 */
