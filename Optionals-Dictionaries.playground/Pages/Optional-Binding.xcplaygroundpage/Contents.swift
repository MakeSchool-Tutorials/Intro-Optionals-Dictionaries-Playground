/*:
 ![Make School Banner](./swift_banner.png)
 
 ## オプショナルバインディング
 
 オプショナルの値をより「Swiftらしく」試験し、使用する方法は、**オプショナルバインディング**と呼ばれます。これを実行するには、値が存在するか否かをテストし、存在する場合はより狭いスコープでこの値のために新しい変数を作成します。ここで、`optionalInt`（存在する場合）の値を新しいスコープの定数（`optionalInt`）にバインドし、出力します。この定数は`if/else`ブロック内にのみ存在します。
 
 */
var optionalInt: Int? = 15
if let optionalInt = optionalInt {
    print("optionalIntは値を含んでいます。それは \(optionalInt)です。")
} else {
    print("optionalIntは値を含んでいません。")
}
print("'if let'の外で, optionalIntは \(optionalInt)を含んでいます。")
/*:
 
 初めてだと少し戸惑うかもしれません。でも、ご安心を。構文に慣れるまで、それほど時間はかかりません。これがどのようにコンソールに出力されるかに注目してください。
 
     optionalIntは値を持っています。それは 15です。
     'if let'の外で, optionalIntはOptional(15)を持っています。
 
 この出力内容について少し考えてみてください。
 
 - callout(課題): 2番目のprintステートメントが、1番目のように値を`15`ではなく`Optional(15)`として出力したのはなぜですか？
 
 - callout(解答): 「バインドおよびアンラップされた」値はif-letステートメントの内側にのみ存在します。elseステートメント内またはif-letの外には存在しません。if-letを離れると、`optionalInt`は通常のオプショナル型に戻ります。
 
 - callout(実験):
 `optionalInt`の値をもう一度変更してみてください。値が含まれる場合には、その旨を示すメッセージが出力され、ローカル変数`optionalInt`にも同じ値が含まれることにもう一度注目してください。値が含まれない場合、if-letステートメントは失敗して、elseステートメントに移動します。アンラップされた`optionalInt`は作成されません。
 
 ## これは前のページと同じことをします
 
 はい、できました！ 前にも言ったように、こちらの方がもう少し「Swiftらしい」方法です。このif-let構文を使うと、コードはより安全になります。
 
 ### なぜあなたのコードはより安全になりますか？
 
  実際の値を使用しなければならないときに`!= nil`構文を使用すると、1つ前のページで見た「!」による「強制アンラップ」を使用しなければなりません。「強制アンラップ」の説明を覚えていますか？ 値がないと、コードは異常終了してしまいます！ if-letを使用することで「強制アンラップ」する必要がなくなり、`nil`をチェックし忘れることもなくなります。
 
 ## 繰り返しチャレンジ
 */
/*:
 - callout(課題): 以下を格納するオプショナルの`Int`の配列を定義してください。
 
         [555, nil, 331, 135, 2213, nil, nil, 232, nil, nil]
 
     配列を繰り返して`nil`の数をカウントし、その一方でnil以外の値もすべて合計するコードを作成してください。今回は必ず「オプショナル バインディング」を使用してください。この解決策では`nil`のチェックは必要ありません！
     
     計算したばかりの値を次のようにコンソールに出力します。
     
         "nilの値は \(numberOfNils) つで、合計は \(sum)"
     
     すべて正しく指定した場合、コンソールには次のメッセージが表示されます。
     
         nilの値は 5 つで、合計は 3466
 
 */





/*:
 [前へ](@previous) | [次へ](@next)
 */
